# Default S-Match configuration file.
# See http://sourceforge.net/apps/trac/s-match/wiki/Manual
# and the comments below.
# 
# S-Match configuration file consists of component configuration sections.
# Each section configures a single component and its properties.
# If component is not specified, it will not be created.
#
# Component configuration section format:
#
# ComponentKey=fully.qualified.ComponentClassName
# ComponentKey.ComponentClassName.key=value
#
# Components prefixed with Global. can be reused in configuration 
# of other components. These are instantiated once and stored.
# For example, declare the global component
# Global.ComponentKey=fully.qualified.ComponentClassName
# and reuse it
# AnotherComponentKey=fully.qualified.ComponentClassName
# AnotherComponentKey.ComponentClassName.key=Global.ComponentKey

# Linguistic Oracle configuration. The class specified as LinguisticOracle
# should implement ILinguisticOracle interface.
Global.LinguisticOracle=it.unitn.disi.smatch.oracles.wordnet.WordNet
# will be loaded from resources
#Global.LinguisticOracle.WordNet.JWNLPropertiesPath=conf/file_properties.xml
# will be created
Global.LinguisticOracle.WordNet.multiwordsFileName=classpath:///conf/s-match/data/wordnet/3.1/cache/multiwords.hash
# skip the loading of arrays
#Global.LinguisticOracle.WordNet.loadArrays=false


# Sense Matcher configuration. The class specified as SenseMatcher
# should implement ISenseMatcher interface.
Global.SenseMatcher=it.unitn.disi.smatch.oracles.wordnet.InMemoryWordNetBinaryArray
# skip the loading of arrays
# Global.SenseMatcher.InMemoryWordNetBinaryArray.loadArrays=false
Global.SenseMatcher.InMemoryWordNetBinaryArray.adjectiveSynonymFile=classpath:///conf/s-match/data/wordnet/3.1/cache/adj_syn.arr
Global.SenseMatcher.InMemoryWordNetBinaryArray.adjectiveAntonymFile=classpath:///conf/s-match/data/wordnet/3.1/cache/adj_opp.arr
Global.SenseMatcher.InMemoryWordNetBinaryArray.nounMGFile=classpath:///conf/s-match/data/wordnet/3.1/cache/noun3_mg.arr
Global.SenseMatcher.InMemoryWordNetBinaryArray.nounAntonymFile=classpath:///conf/s-match/data/wordnet/3.1/cache/noun_opp.arr
Global.SenseMatcher.InMemoryWordNetBinaryArray.verbMGFile=classpath:///conf/s-match/data/wordnet/3.1/cache/verb_mg.arr
Global.SenseMatcher.InMemoryWordNetBinaryArray.nominalizationsFile=classpath:///conf/s-match/data/wordnet/3.1/cache/nominalizations.arr
Global.SenseMatcher.InMemoryWordNetBinaryArray.adverbsAntonymFile=classpath:///conf/s-match/data/wordnet/3.1/cache/adv_opp.arr
# WordNet is used only during conversion
##Global.SenseMatcher.InMemoryWordNetBinaryArray.JWNLPropertiesPath=conf/file_properties.xml

# Mapping Factory configuration. The class specified as MappingFactory 
# should implement IMappingFactory interface.
#Global.MappingFactory=it.unitn.disi.smatch.data.mappings.HashMapping
Global.MappingFactory=it.unitn.disi.smatch.data.mappings.MatrixMapping
Global.MappingFactory.MatrixMapping.matchMatrixFactory=it.unitn.disi.smatch.data.matrices.MatchMatrix
#Global.MappingFactory.MatrixMapping.matchMatrixFactory=it.unitn.disi.smatch.data.matrices.JavaSparseArray


# Context Loader configuration. The class specified as ContextLoader 
# should implement IContextLoader interface.
#ContextLoader=it.unitn.disi.smatch.loaders.context.SimpleXMLContextLoader
#ContextLoader.SimpleXMLContextLoader.oracle=Global.LinguisticOracle
# stores only one instance of a string. saves memory with large contexts with a lot of repetitive labels.
#ContextLoader.SimpleXMLContextLoader.uniqueStrings=true
#ContextLoader=it.unitn.disi.smatch.loaders.context.TabContextLoader
#ContextLoader.TabContextLoader.key=value

# Context Renderer configuration. The class specified as ContextRenderer
# should implement IContextRenderer interface.
#ContextRenderer=it.unitn.disi.smatch.renderers.context.SimpleXMLContextRenderer

# Mapping Loader configuration. The class specified as MappingLoader 
# should implement IMappingLoader interface.
#MappingLoader=it.unitn.disi.smatch.loaders.mapping.PlainMappingLoader
#MappingLoader.PlainMappingLoader.mappingFactory=Global.MappingFactory

# Mapping Renderer configuration. The class specified as MappingRenderer
# should implement IMappingRenderer interface.
#MappingRenderer=it.unitn.disi.smatch.renderers.mapping.PlainMappingRenderer

# Mapping Filter configuration. The class specified as MappingFilter
# should implement IMappingFilter interface.
#MappingFilter=it.unitn.disi.smatch.filters.RedundantMappingFilterEQ
#MappingFilter.RedundantMappingFilterEQ.mappingFactory=Global.MappingFactory
MappingFilter=

# Context Preprocessor configuration. The class specified as ContextPreprocessor
# should implement IContextPreprocessor interface.
ContextPreprocessor=it.unitn.disi.smatch.preprocessors.DefaultContextPreprocessor
# instance of ISenseMatcher interface
ContextPreprocessor.DefaultContextPreprocessor.senseMatcher=Global.SenseMatcher
# instance of ILinguisticOracle interface
ContextPreprocessor.DefaultContextPreprocessor.linguisticOracle=Global.LinguisticOracle
# output in the log the labels being processed
#ContextPreprocessor.DefaultContextPreprocessor.debugLabels=true
# output in the log unrecognized words
#ContextPreprocessor.DefaultContextPreprocessor.debugUnrecognizedWords=true
# words to treat like AND
#ContextPreprocessor.DefaultContextPreprocessor.andWords= + & ^ 
# words to treat like OR
#ContextPreprocessor.DefaultContextPreprocessor.orWords= and or | , 
# words to treat like NOT
#ContextPreprocessor.DefaultContextPreprocessor.notWords= except non without 
# words to ignore
#ContextPreprocessor.DefaultContextPreprocessor.meaninglessWords=of on to their than from for by in at is are have has the a as with your etc our into its his her which him among those against
# characters allowed in numbers
#ContextPreprocessor.DefaultContextPreprocessor.numberCharacters=1234567890


# Context Classifier configuration. The class specified as ContextClassifier
# should implement IContextClassifier interface.
ContextClassifier=it.unitn.disi.smatch.classifiers.CNFContextClassifier

# Matcher Library configuration. The class specified as MatcherLibrary
# should implement IMatcherLibrary interface.
MatcherLibrary=it.unitn.disi.smatch.matchers.element.MatcherLibrary
MatcherLibrary.MatcherLibrary.mappingFactory=Global.MappingFactory
# instance of ISenseMatcher interface
MatcherLibrary.MatcherLibrary.senseMatcher=Global.SenseMatcher
# instance of ILinguisticOracle interface
MatcherLibrary.MatcherLibrary.linguisticOracle=Global.LinguisticOracle
# use only WordNet (false) or use also other matchers (true)
MatcherLibrary.MatcherLibrary.useWeakSemanticsElementLevelMatchersLibrary=true
# list of string matchers, each one should implement IStringBasedElementLevelSemanticMatcher
MatcherLibrary.MatcherLibrary.stringMatchers=it.unitn.disi.smatch.matchers.element.string.Synonym;it.unitn.disi.smatch.matchers.element.string.Prefix;it.unitn.disi.smatch.matchers.element.string.Suffix;it.unitn.disi.smatch.matchers.element.string.NGram;it.unitn.disi.smatch.matchers.element.string.EditDistanceOptimized
# example of a configuration for a specific matcher
#MatcherLibrary.MatcherLibrary.stringMatchers.EditDistance.threshold=0.9
# list of sense and gloss matchers, each one should implement ISenseGlossBasedElementLevelSemanticMatcher
MatcherLibrary.MatcherLibrary.senseGlossMatchers=
# properties to pass down to each sense and gloss matcher
MatcherLibrary.MatcherLibrary.senseGlossMatchers.*.linguisticOracle=Global.LinguisticOracle
MatcherLibrary.MatcherLibrary.senseGlossMatchers.*.senseMatcher=Global.SenseMatcher
# example of a configuration for a specific matcher
#MatcherLibrary.MatcherLibrary.senseGlossMatchers.WNExtendedGloss.threshold=5



# Tree Matcher configuration. The class specified as TreeMatcher
# should implement ITreeMatcher interface.
# Tree Matcher for minimal links.
TreeMatcher=it.unitn.disi.smatch.matchers.structure.tree.mini.OptimizedStageTreeMatcher
TreeMatcher.OptimizedStageTreeMatcher.mappingFactory=Global.MappingFactory
TreeMatcher.OptimizedStageTreeMatcher.nodeMatcher=it.unitn.disi.smatch.matchers.structure.node.OptimizedStageNodeMatcher
TreeMatcher.OptimizedStageTreeMatcher.nodeMatcher.OptimizedStageNodeMatcher.SATSolver=it.unitn.disi.smatch.deciders.CachingSolver
TreeMatcher.OptimizedStageTreeMatcher.nodeMatcher.OptimizedStageNodeMatcher.SATSolver.CachingSolver.SATSolver=it.unitn.disi.smatch.deciders.SAT4J
